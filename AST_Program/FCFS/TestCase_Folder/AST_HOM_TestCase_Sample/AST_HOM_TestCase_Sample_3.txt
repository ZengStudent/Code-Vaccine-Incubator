class TestStringMethods(unittest.TestCase):
    def setUp(self):
       self.processes = [1, 2, 3, 4, 5, 6, 7]
       self.n = len(self.processes)
       self.burst_time = [10, 5, 8, 7, 12, 16, 2]
       self.result = '-'
       print('--------------Setup--------------')

    def test_tri(self):
        print('--------------test_tri--------------')
        try :
            self.assertEqual(hom.findavgTime(self.processes,self.n,self.burst_time),25.43)
            print('Pass')
            self.result='Pass'
        except AssertionError:
            print('Fail')
            self.result = 'Fail'
        except:
            print('Fail')
            self.result = 'Fail'
        finally:
            path = 'AST_TestCase_Result_Folder/AST_HOM_TestCase_Result_Folder/AST_HOM_TestCase_Result_Folder_' + str(folder_numbers) + '/'
            trial_path = path + 'AST_HOM_TestCase_Result_Folder_' + str(folder_numbers) + '_' + str(trail_numbers) + '/'
            #  新建資料夾
            if(os.path.isdir(path) == False):
                os.mkdir(path)
            #  新建資料夾
            if(os.path.isdir(trial_path) == False):
                os.mkdir(trial_path)
            file_dir = trial_path +'AST_HOM_TestCase_Result_'+str(order)+'.txt'
            f = open(file_dir, 'w+', encoding='UTF-8')
            f.write(self.result)
            f.seek(0)
            f.close() 

if __name__ == '__main__':
    unittest.main()