class TestStringMethods(unittest.TestCase):
    def setUp(self):
        self.input_a = [213, 91, 89, 230, 237, 77, 189, 237, 226, 159, 81, 207, 92, 166, 70, 159, 175, 73, 85, 102, 246, 172, 61, 166, 68, 101, 227, 59, 214, 216, 153, 203, 214, 175, 218, 210, 213, 69, 54, 143, 148, 50, 121, 181, 125, 172, 205, 204, 201, 105]
        self.result = '-'
        
        print('--------------Setup--------------')

    def test_tri(self):
        print('--------------test_tri--------------')
        try :
            self.assertEqual(amutant.insertionSort(self.input_a),[50, 54, 59, 61, 68, 69, 70, 73, 77, 81, 85, 89, 91, 92, 101, 102, 105, 121, 125, 143, 148, 153, 159, 159, 166, 166, 172, 172, 175, 175, 181, 189, 201, 203, 204, 205, 207, 210, 213, 213, 214, 214, 216, 218, 226, 227, 230, 237, 237, 246])
            print('Pass')
            self.result='Pass'
        except AssertionError:
            print('AssertionError')
            self.result = 'Fail'
        except:
            print('ExceptError')
            self.result = 'Fail'
        finally:
            path = 'AST_TestCase_Result_Folder/AST_FOM_TestCase_Result_Folder/AST_FOM_TestCase_Result_Folder_'+ str(folder_numbers) + '/'
            #  新建資料夾
            if(os.path.isdir(path) == False):
                os.mkdir(path)
            file_dir = path +'AST_FOM_TestCase_Result_'+str(order)+'.txt'
            f = open(file_dir, 'w+', encoding='UTF-8')
            f.write(self.result)
            f.seek(0)
            f.close() 

if __name__ == '__main__':
    unittest.main()
    